{"version":3,"sources":["components/PageTitle.tsx","pages/Payments.tsx"],"names":["PageTitle","className","rest","classNames","Payments","integration","useSelector","state","integrations","find","x","id","dispatch","useDispatch","useState","currentKey","setCurrentKey","useEffect","a","getIntegration","res","type","payload","stripe_secret_key","console","log","changed","onClick","updateIntegration","disabled","noMinWidth","value","onChange","e","target"],"mappings":"qKAceA,IAT6B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,6BACtE,OACE,+CACMA,GADN,IAEED,UAAWE,IAAW,gDAAiDF,Q,qJCkE9DG,UAhE2B,WACxC,IAAMC,EAAcC,aAAY,SAACC,GAAD,OAC9BA,EAAMC,aAAaC,MAAK,SAACC,GAAD,MAAgB,aAATA,EAAEC,SAE7BC,EAAWC,cACjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,+EAEqBC,YAAe,YAFpC,OAESC,EAFT,OAGGR,EAAS,CAAES,KAAM,qBAAsBC,QAASF,EAAKT,GAAI,aACzDK,EAAcI,EAAIG,mBAJrB,gDAMGC,QAAQC,IAAR,MANH,wDAAD,KASC,CAACb,IAEJ,IAAMc,EAAUrB,GAAeU,IAAeV,EAAYkB,kBAE1D,OAAQlB,EACN,gCACE,sBAAKJ,UAAU,sCAAf,UACE,cAAC,IAAD,CAAWA,UAAU,YAArB,sBAEA,cAAC,IAAD,CACE0B,QAAS,WACP,IAAQJ,EAAsBlB,EAAtBkB,kBACRK,YAAkB,WAAY,CAAEL,sBAChCP,EAAcX,EAAYkB,oBAE5BM,UAAWH,EACXzB,UAAWE,IAAW,eAAgB,CACpC,oCAAqCuB,EACrC,4CAA6CA,IAE/CI,YAAU,EAXZ,SAaGf,IAAeV,EAAYkB,kBAAoB,SAAW,YAG/D,sBAAKtB,UAAU,iBAAf,2HAEsB,sBAAMA,UAAU,gBAAhB,+BAFtB,+GAKA,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,+BACA,cAAC,IAAD,CACE8B,MAAO1B,EAAYkB,kBACnBS,SAAU,SAACC,GAAD,OACRrB,EAAS,CACPS,KAAM,qBACNV,GAAI,WACJW,QAAS,CAAEC,kBAAmBU,EAAEC,OAAOH,kBAlC7B","file":"static/js/19.ea2b001d.chunk.js","sourcesContent":["import classNames from \"classnames\";\r\n\r\nexport interface PageTitleProps\r\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {}\r\n\r\nconst PageTitle: React.FC<PageTitleProps> = ({ className, ...rest }) => {\r\n  return (\r\n    <div\r\n      {...rest}\r\n      className={classNames(\"text-34px font-medium capitalize leading-none\", className)}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default PageTitle;\r\n","import Button from \"components/Button\";\r\nimport PageTitle from \"components/PageTitle\";\r\nimport Input from \"components/GrayInput\";\r\nimport { updateIntegration, getIntegration } from \"api/integrations\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nexport interface PaymentsProps {}\r\n\r\nconst Payments: React.FC<PaymentsProps> = () => {\r\n  const integration = useSelector((state: RootState) =>\r\n    state.integrations.find((x) => x.id === \"payments\")\r\n  );\r\n  const dispatch = useDispatch();\r\n  const [currentKey, setCurrentKey] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const res = await getIntegration(\"payments\");\r\n        dispatch({ type: \"UPDATE_INTEGRATION\", payload: res, id: \"payments\" });\r\n        setCurrentKey(res.stripe_secret_key);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })();\r\n  }, [dispatch]);\r\n\r\n  const changed = integration && currentKey !== integration.stripe_secret_key;\r\n\r\n  return !integration ? null : (\r\n    <div>\r\n      <div className=\"flex justify-between flex-wrap mb-7\">\r\n        <PageTitle className=\"mb-4 mr-4\">Payments</PageTitle>\r\n\r\n        <Button\r\n          onClick={() => {\r\n            const { stripe_secret_key } = integration;\r\n            updateIntegration(\"payments\", { stripe_secret_key });\r\n            setCurrentKey(integration.stripe_secret_key);\r\n          }}\r\n          disabled={!changed}\r\n          className={classNames(\"mb-4 w-140px\", {\r\n            \"bg-orange-300 hover:bg-orange-301\": changed,\r\n            \"bg-gray-300 text-gray-500 cursor-default\": !changed,\r\n          })}\r\n          noMinWidth\r\n        >\r\n          {currentKey === integration.stripe_secret_key ? \"Saved!\" : \"Save\"}\r\n        </Button>\r\n      </div>\r\n      <div className=\"max-w-xl mb-12\">\r\n        To use payments integration, you need to have or create a stripe account. To setup stripe\r\n        payments enter your <span className=\"font-semibold\">stripe secret key</span> down below and\r\n        save it. After that give some time for the app to rebuild with new environment variables.\r\n      </div>\r\n      <div className=\"max-w-xl\">\r\n        <div className=\"mb-2\">Stripe secret key</div>\r\n        <Input\r\n          value={integration.stripe_secret_key}\r\n          onChange={(e) =>\r\n            dispatch({\r\n              type: \"UPDATE_INTEGRATION\",\r\n              id: \"payments\",\r\n              payload: { stripe_secret_key: e.target.value },\r\n            })\r\n          }\r\n        ></Input>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payments;\r\n"],"sourceRoot":""}