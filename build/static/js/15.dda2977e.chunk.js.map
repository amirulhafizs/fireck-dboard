{"version":3,"sources":["api/importExport.ts","pages/ImportExport/index.tsx"],"names":["getAuthHeader","user","store","getState","token","downloadObjectAsJson","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","exportJson","options","a","fetch","window","location","origin","method","headers","Authorization","then","x","json","importJson","ImportExport","uploadRef","useRef","notify","useNotify","sections","title","btnText","description","onClick","setExportOpen","current","useState","exportOpen","collections","collectionTypes","roles","appearance","exportOptions","setExportOptions","isExporting","setIsExporting","className","ref","type","onChange","e","files","target","length","reader","FileReader","onload","dispatch","payload","parse","result","res","error","variant","findCollectionTypes","res1","getAppearance","res2","setColors","colors","readAsText","Modal","open","hideBackdrop","onMouseDown","stopPropagation","Object","keys","map","k","FormControlLabel","classes","label","control","Checkbox","root","checked","prev","Button","s","i"],"mappings":"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","file":"static/js/15.dda2977e.chunk.js","sourcesContent":["import store from \"store\";\r\n\r\nconst getAuthHeader = () => {\r\n  const user = store.getState().user;\r\n  const token = user ? user.token : null;\r\n  return \"Bearer \" + token;\r\n};\r\n\r\nfunction downloadObjectAsJson(exportObj: Object, exportName: string) {\r\n  var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\r\n  var downloadAnchorNode = document.createElement(\"a\");\r\n  downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n  downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\r\n  document.body.appendChild(downloadAnchorNode); // required for firefox\r\n  downloadAnchorNode.click();\r\n  downloadAnchorNode.remove();\r\n}\r\n\r\nexport const exportJson = async (options: { [key: string]: boolean }) => {\r\n  const obj = await fetch(window.location.origin + \"/private/import-export/export\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: getAuthHeader(),\r\n    },\r\n    body: JSON.stringify(options),\r\n  }).then((x) => x.json());\r\n\r\n  downloadObjectAsJson(obj, \"FireckDatabaseSchema\");\r\n};\r\n\r\nexport const importJson = (json: Object) => {\r\n  return fetch(window.location.origin + \"/private/import-export/import\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: getAuthHeader(),\r\n    },\r\n    body: JSON.stringify(json),\r\n  }).then((x) => x.json());\r\n};\r\n","import { exportJson, importJson } from \"api/importExport\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useNotify } from \"components/NotificationsProvider\";\r\nimport { findCollectionTypes } from \"api/collectionTypes\";\r\nimport store from \"store\";\r\nimport Button from \"components/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { getAppearance } from \"api/adminUsers\";\r\nimport { setColors } from \"hooks/useConfiguration\";\r\n\r\nexport interface ImportExportProps {}\r\n\r\nconst ImportExport: React.FC<ImportExportProps> = () => {\r\n  const uploadRef = useRef<any>(null);\r\n  const notify = useNotify();\r\n  const sections = [\r\n    {\r\n      title: \"Export JSON\",\r\n      btnText: \"Export\",\r\n      description:\r\n        \"Export database JSON schema. This JSON file is meant to be imported into other Fireck app\",\r\n      onClick: () => setExportOpen(true),\r\n    },\r\n    {\r\n      title: \"Import JSON\",\r\n      btnText: \"Import\",\r\n      description: \"Import database JSON schema file that was exported from other Fireck app.\",\r\n      onClick: () => {\r\n        uploadRef.current.click();\r\n      },\r\n    },\r\n  ];\r\n\r\n  const [exportOpen, setExportOpen] = useState(false);\r\n  const [exportOptions, setExportOptions] = useState<{ [key: string]: boolean }>({\r\n    collections: true,\r\n    collectionTypes: true,\r\n    roles: true,\r\n    appearance: true,\r\n  });\r\n\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"font-medium text-36px leading-none mb-12\">Import & Export</div>\r\n      <input\r\n        className=\"hidden\"\r\n        ref={uploadRef}\r\n        type=\"file\"\r\n        onChange={(e) => {\r\n          const files = e.target.files;\r\n          if (files && files.length) {\r\n            var reader = new FileReader();\r\n            reader.onload = async function () {\r\n              store.dispatch({ type: \"SET_LOADING\", payload: \"Importing database...\" });\r\n              const json = JSON.parse(reader.result as string);\r\n              const res = await importJson(json);\r\n              store.dispatch({ type: \"SET_LOADING\", payload: false });\r\n              if (!res.error) {\r\n                notify(\"Database imported!\", { variant: \"success\" });\r\n                const res1 = await findCollectionTypes();\r\n                if (!res1.error) {\r\n                  store.dispatch({ type: \"SET_COLLECTION_TYPES\", payload: res1 });\r\n                }\r\n\r\n                const res2 = await getAppearance();\r\n                if (!res2.error) {\r\n                  store.dispatch({ type: \"SET_APPEARANCE\", payload: res2 });\r\n                  store.dispatch({ type: \"SET_NEW_APPEARANCE\", payload: res2 });\r\n                  setColors(res2.colors);\r\n                }\r\n              }\r\n            };\r\n            reader.readAsText(files[0]);\r\n          }\r\n        }}\r\n      ></input>\r\n      <Modal open={exportOpen} hideBackdrop>\r\n        <div\r\n          className=\"w-full h-full overflow-auto flex bg-black bg-opacity-40\"\r\n          onMouseDown={() => setExportOpen(false)}\r\n        >\r\n          <div className=\"bg-white p-9 rounded m-auto\" onMouseDown={(e) => e.stopPropagation()}>\r\n            <div className=\"flex flex-wrap max-w-422px w-full mb-9\">\r\n              {Object.keys(exportOptions).map((k) => (\r\n                <div key={k} className=\"flex w-1/2 px-2 items-center select-none\">\r\n                  <FormControlLabel\r\n                    classes={{ label: \"font-poppins line-clamp-1\" }}\r\n                    control={\r\n                      <Checkbox\r\n                        classes={{ root: \"text-blue-300\" }}\r\n                        className=\"mr-3\"\r\n                        checked={exportOptions[k]}\r\n                        onChange={(e) => {\r\n                          setExportOptions((prev) => ({ ...prev, [k]: e.target.checked }));\r\n                          if (k === \"collections\" && e.target.checked) {\r\n                            setExportOptions((prev) => ({\r\n                              ...prev,\r\n                              collectionTypes: true,\r\n                            }));\r\n                          } else if (k === \"collectionTypes\" && !e.target.checked) {\r\n                            setExportOptions((prev) => ({\r\n                              ...prev,\r\n                              collections: false,\r\n                            }));\r\n                          }\r\n                        }}\r\n                      ></Checkbox>\r\n                    }\r\n                    label={k}\r\n                  ></FormControlLabel>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"flex justify-end\">\r\n              <Button\r\n                onClick={async () => {\r\n                  setIsExporting(true);\r\n                  await exportJson(exportOptions);\r\n                  setIsExporting(false);\r\n                  setExportOpen(false);\r\n                }}\r\n                className=\"bg-orange-300 hover:bg-orange-301\"\r\n              >\r\n                {isExporting ? \"Exporting...\" : \"Export\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"flex flex-wrap\">\r\n        {sections.map((s, i) => (\r\n          <div\r\n            key={`section-${i}`}\r\n            className=\"p-7 bg-gray-300 rounded mr-3 mb-3 max-w-sm w-full flex flex-col\"\r\n          >\r\n            <div className=\"font-medium text-22px mb-3\">{s.title}</div>\r\n            <div className=\"mb-7\">{s.description}</div>\r\n            <div className=\"flex justify-end flex-grow items-end\">\r\n              <Button onClick={s.onClick} className=\"bg-orange-300 hover:bg-orange-301\">\r\n                {s.btnText}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportExport;\r\n"],"sourceRoot":""}